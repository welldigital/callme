// Code generated by go-bindata.
// sources:
// 20171115153101_create_initial.down.sql
// 20171115153101_create_initial.up.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20171115153101_create_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xc8\xca\x4f\x4a\xb0\xe6\x02\x04\x00\x00\xff\xff\xe2\xbe\x7c\x92\x12\x00\x00\x00")

func _20171115153101_create_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115153101_create_initialDownSql,
		"20171115153101_create_initial.down.sql",
	)
}

func _20171115153101_create_initialDownSql() (*asset, error) {
	bytes, err := _20171115153101_create_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115153101_create_initial.down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1510931792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20171115153101_create_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xf0\x98\x00\x39\x0c\xc3\x36\x0c\xe8\xc9\x71\xd4\xce\x98\x2d\x0f\xaa\x32\xb4\x27\x7f\x89\x45\x9d\xba\x56\x20\x3b\x5d\xf2\xef\x87\x28\xfe\x8a\x23\xab\x18\xd6\x9b\xcd\x47\xf1\xf1\x3d\x52\x5a\x91\x3b\x8f\xde\xcc\x66\x2e\x23\x0e\x27\xc0\x9d\x95\x4f\x20\xde\xca\x34\x86\xf9\x0c\x20\xce\x85\xfe\xf6\x28\x07\x1a\x72\xa0\x1b\xdf\x07\x67\xc3\xc3\xc8\xa3\x2e\x23\x01\xa1\x7c\x79\x4e\xab\xb2\x67\x14\xfb\x02\x9b\xdc\x8d\xef\x6b\xe0\xcf\x33\x96\x31\xac\x1d\x4e\xb8\x17\x90\xf9\xb7\x45\x57\x46\xc3\x89\x2a\x63\xf8\xed\x30\xf7\x87\xc3\xe6\x9f\x3f\x7d\xf9\xbe\xe8\xb1\x5d\x72\x2c\x64\x22\x62\x08\xc8\xda\xdb\x04\x9c\x3c\xf4\x07\x7f\x31\x2f\x70\xd8\x23\xfc\x24\x8f\x30\x6f\x9a\x5c\x2c\x4c\x3a\x14\x56\x3b\x59\x56\x38\xd4\xd3\xc7\xde\xd7\x55\x60\x32\x4e\x5c\x76\x85\x72\x61\x40\xea\xfc\x15\x2d\x92\x7b\xf2\xa1\xae\x8b\xd2\x15\x2a\x25\x55\x0c\x2b\x6f\x84\x34\xf1\x89\x83\x06\x53\x3a\x32\x83\x39\xfd\xc4\xe6\xc6\x11\x5a\x6c\xc1\x43\x8d\xaa\x4c\x8a\x93\xfe\x6e\x7a\x5f\xc7\x4a\xd3\xa3\x0d\xd5\xa3\xbf\x16\x6f\x9c\xfa\x30\x21\x53\x98\xd4\x28\x2c\x0e\x3f\x29\xf9\x6a\xdb\xb9\xac\xce\xdf\xd0\xe0\xae\x40\x0d\x9d\xaa\x8b\xa4\xbe\x9c\xa1\xc9\xdf\xce\x2f\x83\xb9\x99\x92\x65\x9d\xf4\xb7\xa8\xfb\xff\xe7\x9b\x74\xa9\xbd\xa9\x32\x6d\xeb\x4e\xe1\x5b\x2e\xf7\x95\xc5\x80\x12\x0f\xb5\x05\x2e\x92\xaa\xde\xef\x84\xdd\xe4\xb1\x17\x6d\x67\xd7\x56\xe8\x0b\xa4\x6d\x68\x2e\xd3\xbb\x16\xd4\xc7\x1d\x5a\x24\x16\x32\x7b\x41\x91\x1e\x6d\xbb\x65\xd3\xb7\x2f\xeb\xbc\x98\xc6\x15\x56\x59\x5e\x0a\x14\x57\x0b\x32\xd6\x7c\x7e\x1a\x86\x8a\x3d\xba\x26\x0f\x90\x8b\x43\xa4\xb1\xe8\xa4\x24\xd2\x7c\x10\xd2\xd6\x89\xb3\xbe\x65\xdb\xc8\xe9\xb8\xe3\x73\xc2\x86\x8f\xef\x0c\x00\xc0\x59\xaf\xc1\x0d\xe9\x3d\x67\xce\xc9\xb2\xa7\x97\x68\x2b\xd3\xa8\x5f\x10\xd0\x59\xb7\x21\x23\xde\x1d\x3d\x77\xd5\x83\x0b\x60\xe4\x96\x30\x42\x5d\x72\x0f\x6d\x70\x88\x8f\x68\x07\x8f\xc5\x34\x79\x9b\x11\xb5\xa3\x34\x75\xa0\x91\x0b\x7a\x1d\xe9\x90\xff\x24\xde\xca\xd4\xc4\xaa\x5f\xe3\x0b\xd6\xad\x4c\xcf\xf1\x31\x63\xb3\xab\x30\x41\xd7\xc0\x1f\x69\xb4\x1b\x06\x81\xc7\x6f\xfe\x06\x00\x00\xff\xff\x91\xa7\x75\xae\x6d\x07\x00\x00")

func _20171115153101_create_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115153101_create_initialUpSql,
		"20171115153101_create_initial.up.sql",
	)
}

func _20171115153101_create_initialUpSql() (*asset, error) {
	bytes, err := _20171115153101_create_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115153101_create_initial.up.sql", size: 1901, mode: os.FileMode(420), modTime: time.Unix(1511213501, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x5d\x6f\xe3\xc6\x15\x7d\x26\x7f\xc5\x44\x40\x02\xa9\x70\x65\x0e\xbf\x29\xc0\x2f\xd9\xdd\x02\xfb\xd0\x0d\xd0\x6c\x9e\x7a\x0b\x63\x86\x9c\x71\x89\x4a\xa2\x97\xa2\xb2\xd7\x5e\xf8\xbf\x17\x67\xee\xd8\xf1\xa6\xc9\xae\x53\xe4\x41\x36\x35\xe2\xdc\x39\xf7\xdc\x73\xce\x5c\x5e\xaa\x57\xd3\xe0\xd4\x8d\x3b\xba\xd9\x2c\x6e\x50\xf6\x4e\xdd\x4c\x7f\xb5\xe3\x71\x30\x8b\xd9\xa6\x97\x97\xea\x34\x9d\xe7\xde\x9d\x76\x78\xce\x33\xdd\x68\xad\x2b\x5d\x15\x3a\xd3\xd7\xfd\xec\xcc\xe2\xae\xc7\xe3\xb8\x8c\x66\xbf\x1d\xa6\x8f\xc7\xed\xe9\xc3\xfe\xeb\x6f\x9e\x6f\x1f\xdf\x7b\x3c\xe9\x66\xc2\xb7\xd7\x3f\xa8\x77\x3f\xbc\x57\x6f\x5e\xbf\x7d\xff\x4d\x9a\xde\x9a\xfe\x3f\xe6\xc6\xa9\xc3\x78\x33\x9b\x65\x9c\x8e\xa7\x34\x1d\x0f\xb7\xd3\xbc\xa8\x75\x9a\xac\xec\xdd\xe2\x4e\xab\x34\x59\xf5\xd3\xe1\x76\x76\xa7\xd3\xe5\xcd\xfd\x78\x8b\x05\x7f\x58\xf0\x6f\x9c\xe4\xef\xe5\x38\x9d\x97\x71\x8f\x2f\x53\xd8\x70\x6b\x96\x7f\x5f\xfa\x71\xef\xf0\x80\x85\xd3\x32\x8f\xc7\x9b\xf0\xdb\x32\x1e\xdc\x2a\xdd\xa4\xa9\x3f\x1f\xfb\x47\x78\xff\x70\x66\x58\xe3\x41\xfd\xf3\x5f\x38\xf6\x42\x1d\xcd\xc1\x29\xd9\xb6\x51\xeb\xc7\x55\x37\xcf\xd3\xbc\x51\x9f\xd2\xe4\xe6\x3e\x7c\x53\xbb\x2b\x05\x54\xdb\x77\xee\x23\x8a\xb8\x79\x1d\x60\xe3\xfb\xf7\x67\xef\xdd\x1c\xca\x6e\x36\x69\x32\xfa\xb0\xe1\x9b\x2b\x75\x1c\xf7\x28\x91\xcc\x6e\x39\xcf\x47\x7c\xbd\x50\xfe\xb0\x6c\xdf\xa0\xba\x5f\xaf\x50\x48\x7d\xfb\x61\xa7\xbe\xfd\x79\x25\x48\xc2\x59\x9b\x34\x79\x48\xd3\xe4\x67\x33\x2b\x7b\xf6\x4a\xce\x91\x43\xd2\xe4\x5a\xe0\x5c\xa9\x71\xda\xbe\x9a\x6e\xef\xd6\xdf\xd9\xb3\xbf\x50\x37\xf7\x9b\x34\xe9\xf7\x6f\x1e\x91\x6e\x5f\xed\xa7\x93\x5b\x6f\xd2\x3f\x0b\x0f\xca\x48\xfd\xdf\x29\xe4\xe6\x59\x70\xc7\x45\x7b\xf6\xdb\xef\x01\x7d\xbd\xb9\xc0\x1b\xe9\x43\x9a\x2e\x77\xb7\x4e\x99\xd3\xc9\x2d\xa0\xfc\xdc\x2f\xa8\x12\xfa\x8b\xf3\x48\x93\xf1\xe8\x27\xa5\xa6\xd3\xf6\x6f\xe3\xde\xbd\x3d\xfa\xe9\x69\x5f\x1c\xe1\xe3\xfa\xb3\x0a\x61\x86\x4a\xc5\x31\xa6\xc9\x69\xbc\x0f\xdf\xc7\xe3\x52\x97\x69\x72\x80\x33\xd4\x53\xd1\xbf\x4f\x83\x0b\x8b\xef\xc7\x83\x53\x90\xc9\x16\x4f\x38\x27\x48\x65\xed\xc7\x5f\x9f\xb5\x51\xef\xcc\xc1\xad\x37\xf1\x04\x9c\x19\xbb\xf4\xe3\x16\xa7\xa7\x0f\x5f\xd8\xfb\xe3\x78\x8f\xbd\x01\xcd\xe7\x5b\x01\xf4\x8b\x5b\x81\x75\xbd\x79\x8e\xfc\xf3\x02\x68\xed\x6b\x05\xd0\xdc\x7a\xf3\x4b\xa3\xff\x53\x21\x76\xff\xfb\x45\xde\x9e\x5e\x8f\xf3\x7a\xa3\xec\x34\xed\x9f\xef\x36\xfb\xd3\x57\x3a\xbf\x3b\x49\xe3\x6e\xf6\xa6\x77\x9f\x1e\x9e\xed\x8e\x92\x80\xca\xaf\xaf\xbf\x98\x32\xaf\xa7\x8f\xc7\x1f\x3f\xec\xd5\x55\x14\xc9\x7a\x45\xac\x3d\x71\x6b\x89\xb3\x96\x38\xcb\x7e\xfb\xe3\x3d\x71\x93\x13\x67\x1d\xb1\xc7\x7f\x4f\x5c\x65\xb2\xa7\xd1\xc4\x4d\x29\xeb\x78\xae\x2a\xe2\xb2\x25\xee\xf1\x31\xc4\xa5\x27\x2e\x0d\xb1\xcd\x88\x5d\x4d\x9c\x61\x7f\xf9\x79\x6d\x7c\x5c\x4e\x6c\x1d\x71\xd3\x13\x77\x39\xb1\xce\x9f\x63\x58\x3d\xc6\xcf\x8b\x1a\x8c\x6e\xf9\xad\x14\x7a\xf4\xd4\xb3\x14\x4b\x93\xe4\x65\xbc\x5d\xa4\x49\xb2\x7a\x59\xe0\xaf\x2e\xd2\x64\xf3\x64\x84\x17\x55\x07\xde\xbf\x04\x4b\x3f\xc7\x1b\x3c\xfd\x14\x9c\x7f\xa4\xfb\xaf\xe5\xd5\x53\xcc\x84\xa0\xd8\x5d\xfd\x5a\x74\x9f\x60\xc7\x9d\x7a\x71\xc3\x0a\x1e\xdc\x29\xdd\x5e\x28\x98\x69\xf7\xdc\x6b\xeb\x32\xcf\x36\x61\x1d\x16\xd9\x89\x85\x7e\x3a\x8e\xbc\xd6\x95\xce\xba\x42\x37\x5d\x7e\xa1\xb2\xcd\x43\x9a\x18\x40\xf9\x2e\xf0\xf0\x29\x34\xbf\x53\x91\x03\xe0\xdc\x85\xbf\x0f\x4f\x73\x34\x17\x7f\x40\xfe\x3f\xdd\xfe\xbf\xe2\x37\x3d\x71\x55\x12\x97\x03\x71\xed\x89\x07\x4b\x5c\xe0\xf7\x9e\xd8\x0e\xc4\xae\x21\xae\x1a\x62\x9f\x11\x77\xb1\x56\xd1\xc9\xef\x7d\x41\x5c\xd4\xf2\xec\x60\x8a\x4e\x8c\x32\x94\xc4\xbd\x93\xf7\xf3\x41\x4c\x65\x0c\x71\x01\x23\x94\xc4\x79\x43\xdc\x00\x5f\x47\x5c\x56\xc4\xdd\x40\x6c\x0d\x71\x55\x13\xe7\xa8\x6f\x89\xab\x41\x8c\xe7\xf0\x5e\x43\x9c\xb7\xc4\xde\x11\xb7\x86\x38\x2f\x88\x8d\x25\xd6\x2d\xf1\x50\x13\x77\x96\xb8\x1f\x88\x4b\xe0\xd4\xf2\x29\x06\xe2\x2a\x27\xae\x0c\x71\xa7\xa5\x66\x8b\xfe\x1c\x71\xdf\x13\xd7\x38\xcb\x49\xad\xcc\x09\xa6\x3e\x13\x2c\x5d\x25\xe6\x06\x96\xf0\x3e\xb0\x97\xc4\x6d\x4d\xec\x63\xef\xf8\x0d\x3d\xb6\x95\xe0\xf2\xb5\x60\xcc\x1a\x62\x6d\x24\x54\x4c\x46\xac\x2d\xf1\xe0\x65\xbd\x6e\x84\xb3\xf0\x69\x89\x4d\xf1\x0c\x83\x26\x36\x5a\x42\xa2\x01\x2f\x4e\x7a\xb4\xb9\xec\xd3\x08\x22\x2b\x21\x83\x7e\x87\x9e\xb8\x1d\x84\x9f\xda\x12\x3b\xe0\xf1\xc4\x45\x41\xdc\xd5\xc4\x85\x96\xd9\xea\x41\x6a\xd9\x96\x58\x37\xc4\x5d\x26\x3d\xd8\x46\xb8\xc7\x6c\xcb\x5a\x30\x61\x1e\xb9\x21\xae\x0b\x62\xdf\x12\xbb\x41\xb4\xe0\x1b\x99\x01\xde\x41\xd0\x75\x38\x07\xc1\x39\xc4\x5a\x4e\xe6\x6f\xb5\xcc\x0d\xbd\xe7\xe0\x18\xb3\x06\xfe\x5c\x74\x88\x9e\x07\x23\x1a\x43\x50\x76\x3d\x71\xd1\x13\xfb\x52\xf8\x81\x26\x80\x3b\x47\x6d\x70\xdf\x0a\x37\x1e\x7c\x97\x32\x3f\xe0\x81\x4e\x3b\xe8\xa5\x97\x73\x4a\xd4\x31\xc2\x11\x34\x14\xf4\xd3\xc5\xe7\x56\xf4\x38\x80\xf3\x46\xe6\x39\x34\x12\xe6\x75\x26\x9a\x04\x3f\xa8\xd5\xd4\x32\x4f\xe0\xaf\x35\x71\x89\x60\x37\x72\xbe\xae\x44\xcb\x08\xf0\xc6\x8a\x36\x31\x2f\xe3\xc4\x67\x43\x1e\xdf\x81\x3e\x2b\xa9\x1f\x74\x62\x05\x6f\x5b\x8a\x86\xa0\x4d\xf0\xdc\x62\xe6\x35\x71\x55\x08\x76\xe0\xc0\x1a\xbc\xe5\x07\xe2\xbe\x14\xae\xfb\x9a\x58\x6b\xd1\x71\x0d\xcf\x01\x57\x21\xb3\x87\xa7\xd0\x3b\x3c\xd1\x15\xa2\xc3\x1a\x17\x0d\xb8\xf1\xd2\x2f\x2e\x28\xf4\x0e\xad\x65\x03\xf1\x50\xc9\xb3\xf5\xc4\xba\x8e\x5c\x62\x06\x46\xb8\xcd\xb5\x60\xea\x22\x6f\xd0\x34\x38\x86\x47\x30\xf3\xbc\x93\x99\xd7\x71\x8e\xb6\x13\x9d\xc1\x0b\xd0\xf9\x90\x89\x16\xc1\x0b\xf8\xc3\x99\x5d\xc4\x0a\x9e\x4c\x29\x7a\xc1\x99\xe0\x0f\x99\x81\x7d\xd8\x8f\xb9\x83\x03\xd4\xec\x3a\xe1\xba\x8e\xf9\x00\x8d\x40\xb3\xa6\x15\x1f\x84\x8b\xb5\x11\x2f\xe0\x92\x36\x9d\xe4\x15\xfe\x83\xcb\x1a\xde\xb0\x32\x5b\x87\x9e\xac\x78\x0d\x5a\x86\xbf\xfb\x8a\xb8\xcd\xe2\x65\xec\x89\x2d\xe6\x55\xc9\x3b\x38\x17\x78\xa1\x15\x17\x67\x37\xa0\x5e\x29\x1a\x87\x8f\x50\x1f\xbe\x0c\x5a\xaa\x45\xff\x59\xec\x2f\xfc\xd6\x4a\x2d\x70\x6f\xad\x70\x1d\x72\xb1\x11\x4f\x62\x9e\xd0\x34\xd6\x8b\xa8\xa9\x52\x4b\x56\x69\x27\x35\xb0\x0f\xfd\x87\x1a\x8d\xf0\x83\x9e\x6c\x2f\xf3\x09\xda\xa8\xe4\xfc\xa0\x77\x47\x9c\x3d\xfa\xa0\x11\x3c\xa8\x8d\x8c\x0c\xb9\xe2\x24\x9b\x90\x63\xd0\x4c\x11\x73\x37\xaf\x85\x03\x64\x03\x66\x04\x7d\x99\xd8\x2b\xfa\xc2\x33\xb0\x42\xe3\xa8\xa3\x33\x79\x46\x5d\x68\xd9\x16\x32\xd3\x80\xd5\x8a\xcf\x5d\x27\x99\xe3\x0a\xe2\x06\xde\xcb\xe3\xb9\x5e\x38\x85\x37\x70\x97\x20\x73\x81\xdd\x78\xd1\x36\xf4\x82\xbd\x45\xe4\x17\xba\x80\x46\x90\x83\x06\xb3\x6b\x22\xb7\x36\xea\xba\x15\xad\x07\x4c\xb1\x56\xe0\x4a\x4b\x76\x60\x86\xe0\x1b\xf5\x9a\x46\xf4\x1f\xbc\x67\xc5\xff\x98\x69\xc8\xcb\x8c\xb8\xcc\x7f\xc9\x2f\xf0\x81\x19\x20\x87\xda\x56\x70\xd7\x31\xdf\xf1\x0c\xfd\xc0\xcf\xc8\x6a\x68\x10\x1e\xb5\xd1\x5b\x61\xbd\x92\xfc\xc7\x3c\x71\x16\x3c\xa9\x63\x6f\x5d\xbc\x7b\x03\xa7\xf1\x7e\x09\xda\x28\x45\x77\xe8\xc7\x45\x8c\xe0\xd8\x0c\xe2\x73\xe4\x7b\xb8\xdb\xb4\x64\xb4\x8d\xf7\x60\xc0\xae\x45\x8b\xe0\x13\x77\x7f\xdd\xc9\x5d\x8b\xfb\x07\x39\xd3\xea\xff\x06\x00\x00\xff\xff\xde\x1f\x90\x77\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1511247995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20171115153101_create_initial.down.sql": _20171115153101_create_initialDownSql,
	"20171115153101_create_initial.up.sql": _20171115153101_create_initialUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20171115153101_create_initial.down.sql": &bintree{_20171115153101_create_initialDownSql, map[string]*bintree{}},
	"20171115153101_create_initial.up.sql": &bintree{_20171115153101_create_initialUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

