// Code generated by go-bindata.
// sources:
// 20171115153101_create_initial.down.sql
// 20171115153101_create_initial.up.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20171115153101_create_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xc8\xca\x4f\x4a\xb0\xe6\x02\x04\x00\x00\xff\xff\xe2\xbe\x7c\x92\x12\x00\x00\x00")

func _20171115153101_create_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115153101_create_initialDownSql,
		"20171115153101_create_initial.down.sql",
	)
}

func _20171115153101_create_initialDownSql() (*asset, error) {
	bytes, err := _20171115153101_create_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115153101_create_initial.down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1510931792, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20171115153101_create_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\xf6\x68\x03\x39\x14\x45\x5b\x14\xc8\x89\x96\x99\x94\xa8\x44\x15\x0c\x5d\x24\x27\x3d\x4c\x06\x91\xa3\x88\x06\x45\xa7\xf6\xdf\x17\xa6\xf5\xb2\x42\x2a\x2d\xda\x9b\xb4\xb3\xdc\xd9\x99\xe5\x72\x89\x6f\x09\xbd\x9e\xcd\x02\x86\x11\xc7\xc0\xd1\x32\xc4\x90\x6e\x55\x9e\xc2\x7c\x06\x90\x16\xc2\x7e\x13\xca\x81\xc6\x1c\xe8\x3a\x0c\x01\xad\x79\x9c\x10\x1a\x30\x1c\x61\xca\xaf\xce\x69\xf5\xe6\x49\x8a\x7d\x29\x9b\xdc\x75\x18\x5a\xe0\xd7\x93\xac\x52\x58\x21\x8e\x39\x89\x70\x57\xc3\x62\x99\xae\x52\xf8\x89\x58\xf0\x0d\xb1\xf9\xc7\x0f\x9f\xbe\x2e\x7a\x6c\x97\x1d\x4b\x95\x89\x14\x22\xbc\x22\xeb\x88\xe3\xfb\xfe\xe0\x0f\x46\x22\xc4\x1e\xe0\x3b\x7e\x80\x79\xd3\xe1\x62\xe1\x12\xa1\x65\xbd\x53\x55\x2d\x87\x62\xfa\xd8\xfb\xa2\x4a\x99\x8d\x13\xaf\xba\x42\x85\x70\x20\xa6\x78\x91\x3e\xbd\x3d\xf3\x50\xd4\x45\xdd\x5a\x6a\xad\x74\x0a\x4b\x32\x42\x9a\xb8\xe7\xa0\xc3\x91\x8e\xcc\xe1\x4c\x3f\xab\xb9\x73\x78\x13\x9e\xc8\x83\x91\xba\xca\xca\x93\xf8\x6e\x74\x9f\xbf\x2c\x2e\xbb\xcd\x8f\x53\xa8\x9d\xfb\x5b\xf1\xce\x91\x0f\x13\x36\x5a\x66\x46\x0a\x9f\xbd\x8f\x5a\xbd\x78\xaf\xda\xc6\x14\xaf\xd2\xe1\xab\x90\x16\x3a\xd5\x15\x99\x19\x8c\xce\x65\x6b\x67\x93\xc3\xd3\x8d\x56\x95\xc9\xfa\xb5\xe9\xfe\xff\x7a\x75\x2e\x25\x37\x55\xfc\x6e\xee\xb4\x7c\x2d\xd4\xbe\xf6\x49\xaf\xe4\xc1\xf8\xb0\x32\xab\xcd\x7e\x27\x26\x5c\x1d\x5b\xd0\x36\xf4\xd6\x01\xbb\x2b\x56\x7d\xb3\x37\xef\x2a\x37\xc7\x9d\x9c\x50\x56\xaa\xcd\xb3\x14\xf9\x71\xea\x26\x79\x95\xed\x2b\x53\x94\x7f\xa8\xe9\xbc\xe5\x43\x45\x84\xae\xf0\x3d\x14\xe2\x90\x58\x2c\x39\x75\x9a\xd8\x92\x10\xd3\x56\xe9\xb9\xff\xab\x96\xeb\x74\x1c\x85\x1c\xb3\xe1\x23\x3a\x03\x00\x40\xab\x15\x04\x31\xbd\xe3\x0c\x9d\x2c\x79\x7c\x4e\xb6\x2a\x4f\xfa\xb9\x83\xcd\xba\x89\x19\x26\xb7\xf4\xdc\x55\x0f\x2e\x80\xe1\x1b\xcc\x30\x0d\xf0\x1d\xb4\xc1\x21\x3e\xa2\x1d\xac\xbe\x9f\xbc\xcd\x48\xda\x51\xb9\x3a\xb0\xc8\x05\xbd\x8d\x74\xc8\x3f\x12\x6f\x55\xee\x62\xb5\x0f\xeb\x05\xeb\x56\xe5\xe7\xf8\x98\xb1\xb9\x8b\xe0\xa1\x6b\xe0\xff\x69\x74\x10\x47\x11\xe1\xd7\xbf\x03\x00\x00\xff\xff\x41\x17\x65\x08\x35\x07\x00\x00")

func _20171115153101_create_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115153101_create_initialUpSql,
		"20171115153101_create_initial.up.sql",
	)
}

func _20171115153101_create_initialUpSql() (*asset, error) {
	bytes, err := _20171115153101_create_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115153101_create_initial.up.sql", size: 1845, mode: os.FileMode(420), modTime: time.Unix(1510931785, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5d\x6f\xdb\xc8\x15\x7d\x16\x7f\xc5\xac\x80\x5d\x48\x85\x2b\x73\xf8\x4d\x01\x7e\xd9\x24\x05\xf2\xd0\x2c\xd0\xcd\x3e\xf5\x16\xc6\x0c\x39\xe3\x12\x95\x44\x87\xa2\x36\xd7\x0e\xfc\xdf\x8b\x33\x77\xe4\x2a\xdb\xdd\xc4\x29\xfa\x20\x93\x1c\x73\xee\xc7\xb9\xe7\x9c\xe1\xf5\xb5\x7a\x35\xf6\x4e\xdd\xb9\x83\x9b\xcc\xec\x7a\x65\x1f\xd4\xdd\xf8\x67\x3b\x1c\x7a\x33\x9b\x4d\x72\x7d\xad\x8e\xe3\x69\xea\xdc\x71\x8b\xfb\x2c\xd5\xb5\xd6\xba\xd4\x65\xae\x53\x7d\xdb\x4d\xce\xcc\xee\x76\x38\x0c\xf3\x60\x76\x9b\x7e\xfc\x78\xd8\x1c\x3f\xec\xbe\xfe\xe6\xe9\xfe\xfc\xde\x39\xd3\xdd\x88\xa7\xd7\x3f\xa9\x77\x3f\xbd\x57\x6f\x5e\xbf\x7d\xff\x5d\x92\xdc\x9b\xee\x5f\xe6\xce\xa9\xfd\x70\x37\x99\x79\x18\x0f\xc7\x24\x19\xf6\xf7\xe3\x34\xab\x55\xb2\x58\xda\x87\xd9\x1d\x97\xc9\x62\xd9\x8d\xfb\xfb\xc9\x1d\x8f\xd7\x77\x8f\xc3\x3d\x16\xfc\x7e\xc6\x65\x18\xe5\xef\xf5\x30\x9e\xe6\x61\x87\x87\x31\x6c\xb8\x37\xf3\x3f\xaf\xfd\xb0\x73\xb8\xc1\xc2\x71\x9e\x86\xc3\x5d\xf8\xdf\x3c\xec\xdd\x32\x59\x27\x89\x3f\x1d\xba\x73\x79\x7f\x73\xa6\x5f\xe1\x46\xfd\xfd\x1f\x48\x7b\xa5\x0e\x66\xef\x94\x6c\x5b\xab\xd5\x79\xd5\x4d\xd3\x38\xad\xd5\xa7\x64\x71\xf7\x18\x9e\xd4\xf6\x46\xa1\xaa\xcd\x3b\xf7\x11\x41\xdc\xb4\x0a\x65\xe3\xf9\xc7\x93\xf7\x6e\x0a\x61\xd7\xeb\x64\x31\xf8\xb0\xe1\xbb\x1b\x75\x18\x76\x08\xb1\x98\xdc\x7c\x9a\x0e\x78\xbc\x52\x7e\x3f\x6f\xde\x20\xba\x5f\x2d\x11\x48\x7d\xff\x61\xab\xbe\xff\x75\x29\x95\x84\x5c\xeb\x64\xf1\x94\x24\x8b\x5f\xcd\xa4\xec\xc9\x2b\xc9\x23\x49\x92\xc5\xad\x94\x73\xa3\x86\x71\xf3\x6a\xbc\x7f\x58\xfd\x60\x4f\xfe\x4a\xdd\x3d\xae\x93\x45\xb7\x7b\x73\xae\x74\xf3\x6a\x37\x1e\xdd\x6a\x9d\xfc\xbf\xea\x41\x18\x89\xff\x07\x81\xdc\x34\x49\xdd\x71\xd1\x9e\xfc\xe6\x47\x94\xbe\x5a\x5f\xe1\x8d\xe4\x29\x49\xe6\x87\x7b\xa7\xcc\xf1\xe8\x66\x40\x7e\xea\x66\x44\x09\xfd\xc5\x79\x24\x8b\xe1\xe0\x47\xa5\xc6\xe3\xe6\x2f\xc3\xce\xbd\x3d\xf8\xf1\x79\x5f\x1c\xe1\x79\xfd\x22\x42\x98\xa1\x52\x71\x8c\xc9\xe2\x38\x3c\x86\xe7\xe1\x30\x57\x45\xb2\xd8\x43\x19\xea\x39\xe8\x5f\xc7\xde\x85\xc5\xf7\xc3\xde\x29\xd0\x64\x83\x3b\xe4\x09\x54\x59\xf9\xe1\xb7\xb9\xd6\xea\x9d\xd9\xbb\xd5\x3a\x66\x40\xce\xd8\xa5\x1f\x36\xc8\x9e\x3c\x7d\x61\xef\xcf\xc3\x23\xf6\x86\x6a\x3e\xdf\x8a\x42\xbf\xb8\x15\xb5\xae\xd6\x97\x95\x7f\x1e\x00\xad\x7d\x2d\x00\x9a\x5b\xad\xff\xd3\xe8\x7f\x45\x88\xdd\xff\x71\x90\xb7\xc7\xd7\xc3\xb4\x5a\x2b\x3b\x8e\xbb\xcb\xdd\x66\x77\xfc\x4a\xe7\x0f\x47\x69\xdc\x4d\xde\x74\xee\xd3\xd3\xc5\xee\x48\x09\xb0\xfc\xf6\xf6\x8b\x2e\xf3\x7a\xfc\x78\xf8\xf9\xc3\x4e\xdd\x44\x92\xac\x96\xc4\xda\x13\x37\x96\x38\x6d\x88\xd3\xf4\xf7\x7f\xde\x13\xd7\x19\x71\xda\x12\x7b\x5c\x3d\x71\x99\xca\x9e\x5a\x13\xd7\x85\xac\xe3\xbe\x2c\x89\x8b\x86\xb8\xc3\xcf\x10\x17\x9e\xb8\x30\xc4\x36\x25\x76\x15\x71\x8a\xfd\xc5\xe7\xb1\xf1\x73\x19\xb1\x75\xc4\x75\x47\xdc\x66\xc4\x3a\xbb\xac\x61\x79\xb6\x9f\x17\x35\x18\xd5\xf2\x7b\x2e\x74\xd6\xd4\x85\x8b\x25\x8b\xc5\xcb\x70\xbb\x4a\x16\x8b\xe5\xcb\x0c\x7f\x79\x95\x2c\xd6\xcf\x42\x78\x51\x74\xd4\xfb\xa7\x20\xe9\xcb\x7a\x83\xa6\x9f\x8d\xf3\x5b\xba\xff\x9a\x5f\x3d\xdb\x4c\x30\x8a\xed\xcd\x6f\x49\xf7\x09\x72\xdc\xaa\x17\x37\xac\xa0\xc1\xad\xd2\xcd\x95\x82\x98\xb6\x97\x5a\x5b\x15\x59\xba\x0e\xeb\x90\xc8\x56\x24\xf4\xcb\x61\xe0\x95\x2e\x75\xda\xe6\xba\x6e\xb3\x2b\x95\xae\x9f\x92\x85\x41\x29\x3f\x04\x1c\x3e\x85\xe6\xb7\x2a\x62\x80\x3a\xb7\xe1\xef\xd3\xf3\x1c\xcd\xd5\x37\xd0\xff\x97\xfb\xff\x95\xfc\xa6\x23\x2e\x0b\xe2\xce\x12\x57\x8e\xb8\xb7\xc4\x79\x4a\xac\x53\x62\xdb\x11\x7b\x4b\x9c\x59\x62\x5f\x11\x57\x88\x95\x13\xe7\x2d\xb1\x2e\x88\x8b\x92\xb8\xb4\x72\x0f\x51\x34\x2d\x71\x5b\x11\xb7\xb8\x16\xc4\xa6\x21\x2e\x0a\x62\x5d\x12\xa7\xc8\xd3\x13\x67\x05\x71\x56\x13\xe7\x3d\x71\xd1\x11\xa7\x78\x5f\x13\x9b\x9c\xb8\x69\xe4\x19\x71\x4d\x2d\x39\x7b\x4f\xac\x6b\x62\x53\x11\xfb\x92\xd8\x66\xc4\x45\x46\x9c\x19\xe2\xac\x27\xee\x0d\x71\x6b\x89\x6d\x41\x6c\x73\xe2\xbe\x23\xee\x5b\xa9\xc1\x95\x22\x6e\xd4\x55\x79\x11\xb9\xed\x89\x5b\x47\xdc\xf5\x22\xd8\xa6\x22\xd6\x9a\xb8\xab\x89\xbb\x94\xb8\xd7\xc4\x79\x46\xdc\x15\xc4\x6d\x2a\x98\x40\xf8\x61\x4f\x26\x22\x0e\x35\x03\xa3\x2a\xae\x39\x62\x9d\x8b\x29\x34\x88\x85\x98\x1d\xb1\x6b\x88\x73\x23\xbd\xa7\xe8\xb1\x27\xae\x51\x5b\x27\xf8\x6a\x13\xb1\xee\x88\x2b\x2d\xfb\x8d\x27\xee\x1c\x71\xd5\x4a\xbf\x30\x96\xa2\x25\x6e\x0c\x71\x0d\xfc\x5a\xe9\x17\x7d\xd6\x25\xb1\x6e\x88\x4b\x43\xec\x50\x7b\x4d\xdc\xe6\x71\xa6\x19\x71\xd9\x10\x67\x9a\xb8\x71\x32\x33\xe0\x50\xa7\xc4\x25\x7a\xcd\x89\xab\x4c\x70\x32\x4e\xde\xf7\x71\x86\xd8\xe7\xc1\x91\x9e\xd8\x6a\x62\xdf\x0a\x3e\x30\xc7\xd6\x8b\x99\x65\x30\x34\x43\x5c\xc1\xd4\x6a\x62\x8d\x79\x5a\xe2\xb6\x94\x18\xe0\x44\x96\x09\x87\x70\x75\x56\xe6\xeb\x72\xe1\x94\x77\x52\x33\x62\x16\x95\xbc\x03\xcc\x75\x5c\xcf\xad\xe0\xda\xa4\x82\x59\x9f\x13\x3b\x2d\x35\xe3\x0a\x13\x35\x78\x2e\x65\xa6\x65\x2e\x73\x02\x27\x9a\x5a\xde\xf3\x86\xb8\x6f\x24\x9f\xc9\xc4\xac\xd1\x6f\xd3\xcb\xbc\x80\xb5\x35\xc2\xa7\xa6\x14\x6c\xb2\x54\xb8\x56\x37\xc2\xcb\xdc\x49\x7c\xf0\xd5\xe7\x72\x38\xf4\x91\xfb\x7d\x2f\xd8\x57\x26\xce\x16\xe6\x6f\x04\x87\x3c\xf2\xb4\xc5\x01\x81\xbe\xc1\xe1\x54\x70\x6f\xe3\x4c\xba\x4e\x7a\x81\x0e\x72\x68\x11\x3c\xc6\x8c\x72\xc9\x8f\x1a\x03\xef\x30\x97\xb8\x0f\xf5\x76\xf1\x87\x59\x63\x66\xe0\x28\x72\x87\xd9\x78\xe2\xac\x93\xf9\x58\x2b\x3c\x6f\xbc\xe0\x03\x3d\xb6\xbd\xe0\x01\xdd\x7a\x2d\x5c\x43\x5c\xcc\x01\xf9\xf2\x2a\xf6\x54\xc9\x5c\xd0\x4f\x88\x7b\x8e\x63\xe4\x1e\xf5\x01\x3f\xe8\x2f\xf0\xbd\x88\xcf\x71\x3e\xe8\xe5\xac\x11\x68\xa0\x2f\xc5\x07\x80\xbf\xc6\x0c\xba\xc8\xf3\x92\xb8\x82\xf7\x44\xee\x02\x1f\xcc\x1a\x33\x2a\x2b\xe1\x53\xd7\xca\x2c\x2d\xf4\xd0\x0a\x77\xc2\xc1\x6d\x44\x03\xe8\x35\x2b\x89\xf3\x5a\x38\xe0\x3b\xc1\xc4\x39\xf1\x05\x68\x36\x78\x45\x21\xdc\xf5\x51\x53\xa8\xd7\xc1\xbb\xb4\xe0\x88\x83\x1c\x73\x33\x11\x37\xf0\x0f\x5e\x95\x01\x93\x4e\x38\x0e\xdc\xfa\x54\x70\xf2\x05\x71\x5f\x89\xb6\x6d\xf4\x49\xd4\x0c\x9d\xc2\x8b\x50\x8f\xf3\xe2\x55\xb8\x87\x86\x80\x3f\xf4\x0f\x1e\xe1\x5d\x63\x24\x17\xde\x07\x86\xd0\x1a\x3e\x36\x9c\x91\xbc\xc1\x2f\xd0\x77\x1f\xe3\xe7\xe2\xad\xb5\x97\x79\x02\x0f\x68\x0c\x5e\x57\xe4\xc2\xcb\xa6\x10\x4d\x43\xc3\xe0\x2d\xe2\xe2\x23\x04\xf3\x08\x9e\xd0\x89\x1f\x00\xbb\x36\x6a\x24\x7c\x98\xa4\x82\x3d\xea\x0a\x71\xdb\x78\x46\x58\xf1\x75\x68\x18\x3c\x83\x5f\x41\x2f\xb8\xda\xa8\xcb\x2c\x8f\x5e\x97\xcb\xd9\x52\xa4\xb2\x2f\x78\x7f\x41\x9c\x6b\xe1\x0d\xf4\x0f\x3f\x04\x0e\xa8\x03\xfd\x61\x3e\x05\x66\x55\x09\x56\xf8\xb0\x0a\xf3\x6e\x85\xf7\x01\x1f\x13\x7d\xa5\x15\x5c\x6c\x1d\xf1\xef\x64\xe6\xe0\x6f\x16\xfd\x22\xf8\x83\x15\x7d\xe5\xd1\xc7\x80\x05\xe6\x67\xe3\xbc\xb3\xa8\x6d\xf8\x02\xd6\xe1\x99\xe0\x46\xe0\x7a\x27\x39\xf1\xb1\x07\x7e\x97\x5a\x6a\xc9\xe3\xc7\x1e\xf4\x98\x46\xdf\x69\xa2\xee\xb1\x06\x0d\xc3\x97\x70\xd6\xa0\x26\xf0\x0f\x3e\x64\x63\x7d\xc0\x0f\xfb\x5c\xe4\x09\x66\x06\x5f\x00\xf7\xda\x46\xbc\x36\xf4\x6c\xc5\x03\x83\xbf\xc5\x7b\xcc\x01\x67\x42\xc0\x1f\xf8\xd6\x72\x6e\xa1\x57\xf8\x3e\x74\x7f\xc6\xfe\xf2\xe3\xb3\xd0\x72\x7e\x56\xe5\xbf\x03\x00\x00\xff\xff\xe3\xdb\x80\x7b\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1510931823, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20171115153101_create_initial.down.sql": _20171115153101_create_initialDownSql,
	"20171115153101_create_initial.up.sql": _20171115153101_create_initialUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20171115153101_create_initial.down.sql": &bintree{_20171115153101_create_initialDownSql, map[string]*bintree{}},
	"20171115153101_create_initial.up.sql": &bintree{_20171115153101_create_initialUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

