// Code generated by go-bindata.
// sources:
// 20171115153101_create_job_table.down.sql
// 20171115153101_create_job_table.up.sql
// 20171115154634_create_jobresponse_table.up.sql
// 20171115154931_create_schedule_table.up.sql
// 20171115155747_create_crontab_table.up.sql
// 20171115155941_create_lease_table.down.sql
// 20171115155941_create_lease_table.up.sql
// 20171115160316_create_relationships.up.sql
// bindata.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20171115153101_create_job_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xc8\xca\x4f\x4a\xb0\xe6\x02\x04\x00\x00\xff\xff\xe2\xbe\x7c\x92\x12\x00\x00\x00")

func _20171115153101_create_job_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115153101_create_job_tableDownSql,
		"20171115153101_create_job_table.down.sql",
	)
}

func _20171115153101_create_job_tableDownSql() (*asset, error) {
	bytes, err := _20171115153101_create_job_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115153101_create_job_table.down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1510836925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20171115153101_create_job_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x48\xc8\xca\x4f\x4a\x50\xd0\xe0\x52\x50\x48\xc8\x4c\x01\xb3\x3d\xfd\x42\x14\xfc\xfc\x43\x14\xfc\x42\x7d\x7c\x74\x20\xe2\xc5\xc9\x19\xa9\x29\xa5\x39\xa9\x50\x49\x98\x44\x79\x46\x6a\x5e\x82\x82\x8b\x63\x88\x6b\x88\xa7\xaf\x2b\xaa\xa6\xc4\xa2\xbc\x04\x85\x30\xc7\x20\x67\x0f\xc7\x20\x0d\x23\x03\x13\x0b\x4d\x84\x5c\x41\x62\x65\x4e\x7e\x62\x4a\x82\x82\xaf\xab\x8b\x67\xa8\x6f\x88\x6b\x04\x42\x63\x40\x90\xa7\xaf\x63\x50\xa4\x82\xb7\x6b\xa4\x82\x06\xd4\x49\x9a\x9a\xd6\x5c\x80\x00\x00\x00\xff\xff\x58\xa1\xf6\x7e\xb5\x00\x00\x00")

func _20171115153101_create_job_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115153101_create_job_tableUpSql,
		"20171115153101_create_job_table.up.sql",
	)
}

func _20171115153101_create_job_tableUpSql() (*asset, error) {
	bytes, err := _20171115153101_create_job_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115153101_create_job_table.up.sql", size: 181, mode: os.FileMode(420), modTime: time.Unix(1510836880, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20171115154634_create_jobresponse_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x3e\xc5\x8d\x2d\xf4\x0d\x9c\xd2\xf6\x86\xc3\x24\x95\x70\x01\x3b\x19\xa5\x19\x22\x6a\x24\xf1\xfd\x71\xa8\x54\x1a\x74\xfd\xbf\xef\xfe\xe3\xef\x0d\x0a\x46\x60\xd1\x49\x04\x77\x8d\x97\xe4\xf3\x33\x3e\xb2\x77\x50\x57\x00\x2e\xcc\x9b\x8c\x34\x83\xb6\x52\x82\xb0\x3c\x9e\x48\xf7\x06\x15\x6a\x6e\x17\xf5\xe6\xcf\xab\x34\x2e\x62\xbb\x96\x84\xf9\x07\x79\x85\xbb\x77\x30\x08\x46\x26\x85\x5b\xf6\xfd\xaa\x70\x20\xab\x18\x8f\x65\x6f\xf6\x29\xc5\xe4\xa0\xa3\x82\x7c\xf2\x3f\x87\x07\x43\x4a\x98\x09\xf6\x38\x41\x5d\x4c\x6c\x9a\x5d\xf5\x0e\x00\x00\xff\xff\xce\x2c\x76\xa3\x15\x01\x00\x00")

func _20171115154634_create_jobresponse_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115154634_create_jobresponse_tableUpSql,
		"20171115154634_create_jobresponse_table.up.sql",
	)
}

func _20171115154634_create_jobresponse_tableUpSql() (*asset, error) {
	bytes, err := _20171115154634_create_jobresponse_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115154634_create_jobresponse_table.up.sql", size: 277, mode: os.FileMode(420), modTime: time.Unix(1510852766, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20171115154931_create_schedule_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x31\x4f\x85\x30\x14\x85\xf7\xf7\x2b\xee\x08\x89\x93\x89\x2e\x4e\x7d\x70\x13\x1b\x69\x31\xcd\xc5\xc8\xe4\xad\xf4\x1a\x49\x10\x4c\xad\x46\xfe\xbd\x01\x07\x44\xe3\x5b\xcf\xf7\x9d\x33\x9c\xc2\xa1\x22\x04\x52\xc7\x0a\x81\xdf\xba\x67\x09\xef\x83\x30\x64\x07\x00\xee\xc3\x16\x68\x4b\x60\x9b\xaa\x02\xd5\x50\xfd\xa0\x6d\xe1\xd0\xa0\xa5\xb3\xc5\x93\xcf\x24\x71\xf4\x43\x1f\x18\xee\x94\x2b\xae\x95\xcb\xce\x2f\x2e\x73\xb0\xf5\x77\x69\xb5\x1e\xe7\x53\xd4\xc7\x91\x81\xf0\x9e\xf6\xf1\xab\x9f\x87\xc9\x07\x06\x83\xa5\x6e\xcc\x5f\xa1\x8b\xe2\x93\x04\x86\x52\x11\x92\x36\xb8\xc7\x4f\x71\x7a\xf9\x8f\xf9\x2e\xf5\x1f\xc2\x70\xd4\xbf\x36\x83\xac\x68\xd9\x0d\x3e\xc9\xd6\x5f\xe8\xad\xd3\x46\xb9\x16\x6e\xb0\x85\xec\xe7\x45\x79\x7e\x75\xf8\x0a\x00\x00\xff\xff\x32\xf9\xeb\xf8\x4f\x01\x00\x00")

func _20171115154931_create_schedule_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115154931_create_schedule_tableUpSql,
		"20171115154931_create_schedule_table.up.sql",
	)
}

func _20171115154931_create_schedule_tableUpSql() (*asset, error) {
	bytes, err := _20171115154931_create_schedule_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115154931_create_schedule_table.up.sql", size: 335, mode: os.FileMode(420), modTime: time.Unix(1510836943, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20171115155747_create_crontab_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcf\xc1\x0a\x82\x40\x10\xc6\xf1\xbb\x4f\x31\x47\x85\x4e\x41\x5d\x3a\x4d\x36\xd0\x92\xae\xb1\x8c\x81\xa7\xd6\xdc\x85\x04\x51\xd1\xdd\xe8\xf1\x83\x0c\xc9\x83\xc7\xe1\xff\x63\xe0\x8b\x15\x21\x13\x30\x1e\x13\x02\x5d\x0d\x5d\xeb\xca\x87\x86\x30\x00\xd0\xb5\x99\x6f\x21\x19\x64\x9e\x24\x80\x39\x67\x77\x21\x63\x45\x29\x49\xde\x4c\x6c\xac\x9e\xd6\xf8\xc6\xfe\x5c\x36\xd9\x6f\x9c\x3f\xdc\x50\xc5\x67\x54\xe1\x76\xb7\x8f\x96\xa4\x1f\xec\xab\xee\xfc\xa8\xe1\x84\x4c\x2c\x52\x5a\xf6\xd6\xbe\xdd\x5a\x6b\xca\xd1\xf9\xde\x94\xce\x9a\x15\x72\x55\x22\x45\x55\xc0\x85\x0a\x08\xff\x26\x45\xd1\x21\xf8\x04\x00\x00\xff\xff\x8f\x22\xa5\x59\xfd\x00\x00\x00")

func _20171115155747_create_crontab_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115155747_create_crontab_tableUpSql,
		"20171115155747_create_crontab_table.up.sql",
	)
}

func _20171115155747_create_crontab_tableUpSql() (*asset, error) {
	bytes, err := _20171115155747_create_crontab_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115155747_create_crontab_table.up.sql", size: 253, mode: os.FileMode(420), modTime: time.Unix(1510836947, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20171115155941_create_lease_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe2\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x49\x4d\x2c\x4e\xb5\x86\x88\x78\xfa\xb9\xb8\x46\x28\x64\xa6\x54\xc4\x83\x45\xe3\x4b\x2a\x0b\x52\xe3\x4b\xf3\x4a\x32\x73\x14\xfc\xfd\x60\x2a\xb9\x9c\xfd\x7d\x7d\x3d\x43\xac\xb9\x00\x01\x00\x00\xff\xff\x32\x13\xb4\x27\x4d\x00\x00\x00")

func _20171115155941_create_lease_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115155941_create_lease_tableDownSql,
		"20171115155941_create_lease_table.down.sql",
	)
}

func _20171115155941_create_lease_tableDownSql() (*asset, error) {
	bytes, err := _20171115155941_create_lease_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115155941_create_lease_table.down.sql", size: 77, mode: os.FileMode(420), modTime: time.Unix(1510851042, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20171115155941_create_lease_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x4b\x87\x40\x10\xc5\xef\xfb\x29\xde\x51\xe1\x7f\x0a\xea\xe2\x69\xd5\xa1\x96\xdc\xd9\x58\xc6\xc8\xd3\xae\xe5\x1e\x24\xa9\x20\x83\xfc\xf6\xa1\x26\xd1\xc1\xdb\xc0\xef\xcd\xcc\xef\x95\x74\x6b\xb8\x50\xaa\xf2\xa4\x85\x20\xba\x6c\x08\x53\xea\x3f\x13\x32\x05\x8c\xc3\x3e\x1b\x16\x70\xdb\x34\xd0\xad\xb8\x60\xb8\xf2\x64\x89\xe5\xa2\x80\x38\x2f\x1f\x29\xe2\x51\xfb\xea\x4e\xfb\xec\xea\xfa\x26\x07\xbb\x3d\xbe\xf2\xe9\xfd\xe5\x35\x0d\xcf\xcb\x79\x22\xf6\x73\x44\xad\x85\xc4\x58\xfa\x4f\xbe\xde\xe6\x71\x3a\x81\x0f\xde\x58\xed\x3b\xdc\x53\x87\x2c\xfe\x9a\xc6\x3c\xff\x6b\x63\xb8\xa6\x27\x8c\xc3\x77\xd8\x58\x58\x4d\xc3\x76\x12\x8e\x8f\x96\xbb\xff\xe5\xf8\xb5\xad\x3b\x6b\x8d\x14\x3f\x01\x00\x00\xff\xff\x47\x43\x88\xc9\x1c\x01\x00\x00")

func _20171115155941_create_lease_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115155941_create_lease_tableUpSql,
		"20171115155941_create_lease_table.up.sql",
	)
}

func _20171115155941_create_lease_tableUpSql() (*asset, error) {
	bytes, err := _20171115155941_create_lease_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115155941_create_lease_table.up.sql", size: 284, mode: os.FileMode(420), modTime: time.Unix(1510851014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20171115160316_create_relationshipsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\xd0\xb1\x6e\x83\x30\x10\xc6\xf1\x9d\xa7\xb8\xb1\x7d\x06\x26\x03\x07\xb2\x0a\x46\x32\x5e\x3a\x01\xc6\xae\x8a\x8b\xb8\x0a\x27\xef\x1f\x89\x84\x24\x20\x98\x92\xf5\xfb\x9f\xf4\xb3\x1c\x61\xc6\x45\x18\x04\x2c\x57\x28\x41\xb1\x28\x47\x68\x1c\xe9\x26\x00\x00\x60\x49\x02\x71\x29\x2a\x25\x19\x17\x0a\x7e\xfe\x6a\x47\xba\xee\x8d\xef\x7e\xad\x39\x0f\x16\xe6\xab\xb4\x94\xc8\x33\x01\x5f\xf8\x0d\x1f\x8f\xf8\x09\x12\x53\x94\x28\x62\xac\x60\x19\x9f\xfb\x86\x75\xa4\x27\xeb\xff\x69\xf4\xf6\x18\x5f\x2e\xea\xde\x0c\xb6\xf5\xfb\x2f\x98\xcb\x8a\x9f\x97\x7b\x79\x11\x76\xa4\xf7\x54\x47\xba\x37\x2b\xd5\x91\xbe\xee\x5b\xb1\x9b\x68\x3c\xb5\x1a\x0e\xb8\x5b\x7e\xe7\x47\xc7\x65\x51\x70\x15\x5e\x02\x00\x00\xff\xff\x2f\x2f\xb2\x8c\xef\x01\x00\x00")

func _20171115160316_create_relationshipsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20171115160316_create_relationshipsUpSql,
		"20171115160316_create_relationships.up.sql",
	)
}

func _20171115160316_create_relationshipsUpSql() (*asset, error) {
	bytes, err := _20171115160316_create_relationshipsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20171115160316_create_relationships.up.sql", size: 495, mode: os.FileMode(420), modTime: time.Unix(1510852775, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x99\x4b\x6f\xdb\x48\x12\xc7\xcf\xe2\xa7\xe0\x18\x98\x81\xb4\xf0\xca\x7c\x3f\x0c\xe4\x32\x93\x2c\x90\xc3\x66\x80\x9d\xcc\x69\x6b\x61\x34\x9b\xdd\x0e\x77\x65\x51\xa1\xa4\x49\x25\x81\xbf\xfb\xe2\xdf\xd5\xb4\x15\x8f\xad\x47\xec\xdd\x03\xcd\x87\xba\xab\xab\x8a\x5d\xbf\xfe\x37\x7d\x71\x11\xfe\xd2\xb7\x26\xbc\x36\x4b\x33\xa8\x8d\x69\xc3\xe6\x73\x78\xdd\xff\xb5\xe9\x96\xad\xda\xa8\x79\x70\x71\x11\xae\xfb\xed\xa0\xcd\xfa\x12\xd7\x49\x14\x97\x71\x1c\xe7\x71\x9e\xc6\x51\x7c\xa5\x07\xa3\x36\xe6\xea\xdf\x7d\x73\xb5\x51\xcd\xc2\xcc\xdb\xfe\xd3\x72\xbe\xfe\xb8\x38\xa6\xed\x76\xf5\xe7\x96\x59\x91\x66\x3b\x2d\x07\xb3\x5e\xf5\xcb\xb5\xd9\xd7\xa3\x4e\xef\x6c\xaf\xf5\x07\xd3\x6e\x17\xfb\x9a\xe7\x65\x56\x8e\xcd\xf5\xd0\x2f\x37\x6a\x9f\x3b\x79\x9d\xdd\x19\x5f\x18\x75\xe7\xc8\xe3\x61\x3e\xd5\xfa\x11\xcb\x45\x94\xc6\xc5\xd8\x76\x30\x0b\xb5\xe9\xfa\xe5\xfa\x43\xb7\x5a\xef\xb4\x1e\x5f\xc2\x75\x8f\xbb\xd7\xbf\x86\xef\x7e\x7d\x1f\xbe\x79\xfd\xf6\xfd\x0f\x41\xb0\x52\xfa\x3f\xea\xda\x84\x37\xdd\xf5\x20\x9d\x83\xa0\xbb\x59\xf5\xc3\x26\x9c\x06\x93\xb3\xe6\xf3\xc6\xac\xcf\x82\xc9\x99\xee\x6f\x56\x83\x59\xaf\x2f\xae\xbf\x74\x2b\x3c\xb0\x37\x1b\x9c\xba\x5e\xfe\x5e\x74\xfd\x76\xd3\x2d\x70\xd3\xbb\x0e\x2b\xb5\xf9\x70\x61\xbb\x85\xc1\x05\x1e\xac\x37\x43\xb7\xbc\x76\xbf\x6d\xba\x1b\x73\x16\xcc\x82\xc0\x6e\x97\x7a\x74\xef\x1f\x46\xb5\x53\x5c\x84\xff\xfc\x17\x86\x3d\x0f\x97\xea\xc6\x84\xd2\x6d\x16\x4e\xc7\xa7\x66\x18\xfa\x61\x16\x7e\x0d\x26\xd7\x5f\xdc\x5d\x78\xf9\x2a\x84\x57\xf3\x77\xe6\x13\x8c\x98\x61\xea\xdc\xc6\xfd\xcf\x5b\x6b\xcd\xe0\xcc\xce\x66\xc1\xa4\xb3\xae\xc3\x0f\xaf\xc2\x65\xb7\x80\x89\xc9\x60\x36\xdb\x61\x89\xdb\xf3\xd0\xde\x6c\xe6\x6f\x60\xdd\x4e\xcf\x60\x28\xfc\xf1\xe3\x65\xf8\xe3\x1f\x67\xe2\x89\x1b\x6b\x16\x4c\x6e\x83\x60\xf2\x87\x1a\xc2\x66\x6b\x43\x19\x47\x06\x09\x26\x57\xe2\xce\xab\xb0\xeb\xe7\xbf\xf4\xab\xcf\xd3\x9f\x9a\xad\x3d\x0f\xaf\xbf\xcc\x82\x89\x5e\xbc\x19\x3d\x9d\xff\xb2\xe8\xd7\x66\x3a\x0b\x5e\xca\x1f\x98\x11\xfb\x4f\x18\x32\xc3\x20\x7e\xfb\x87\xcd\xd6\xce\x7f\x86\xeb\xd3\xd9\x39\x5a\x04\xb7\x41\xb0\xf9\xbc\x32\xa1\x5a\xaf\xcd\x06\x29\xdf\xea\x0d\xac\xb8\xf8\xfc\xfb\x08\x26\xdd\xd2\xf6\x61\xd8\xaf\xe7\x7f\xeb\x16\xe6\xed\xd2\xf6\x77\xfd\xfc\x2b\x1c\x9f\xef\x58\x70\xef\x30\x0c\xfd\x6b\x0c\x26\xeb\xee\x8b\xbb\xef\x96\x9b\x22\x0b\x26\x37\x80\x46\x78\x67\xf4\xef\x7d\x6b\xdc\xc3\xf7\xdd\x8d\x09\x31\x4d\xe6\xb8\xc2\x38\x6e\xaa\x4c\x6d\xf7\x70\xac\x59\xf8\x4e\xdd\x98\xe9\xcc\x8f\x80\x31\x7d\x94\xb6\x9b\x63\xf4\xe0\x76\x4f\xdf\xdf\xba\x2f\xe8\xeb\xbc\xf9\xb6\x2b\x1c\xdd\xdb\x15\xbe\x4e\x67\xbb\x9e\x7f\x6b\x00\xa1\x1d\x32\x80\xe0\xa6\xb3\xfb\x40\xff\x64\xc1\x47\xff\xb4\x91\xb7\xeb\xd7\xdd\x30\x9d\x85\x4d\xdf\x2f\x76\x7b\xab\xc5\xfa\x40\xe4\x9f\xd7\x12\xb8\x19\xac\xd2\xe6\xeb\xed\x4e\x6f\x3f\x25\x30\xcb\xaf\xae\x0e\xe0\xf7\x75\xff\x69\xf9\xdb\xc7\x45\xf8\xca\x4f\x93\xe9\x19\x71\x6c\x89\xab\x86\x38\xaa\x88\xa3\xe8\xf1\xc3\x5a\xe2\x32\x21\x8e\x6a\x62\x8b\xb3\x25\xce\x23\xe9\x53\xc6\xc4\x65\x26\xcf\x71\x9d\xe7\xc4\x59\x45\xac\x71\x28\xe2\xcc\x12\x67\x8a\xb8\x89\x88\x4d\x41\x1c\xa1\x7f\xf6\xad\x6d\x1c\x26\x21\x6e\x0c\x71\xa9\x89\xeb\x84\x38\x4e\x76\x7d\x38\x1b\x01\x74\x64\x88\xbe\x62\x1e\x23\xd1\x58\x57\x3b\x24\x0b\x26\x93\x63\x73\x77\x1e\x4c\x26\x67\xc7\xae\x88\x67\xe7\xc1\x64\x76\x57\x10\x47\x8e\x00\xaf\xff\xe2\x8a\x7b\xd7\x6b\x57\xdd\x77\x08\x3d\x2d\x0b\x87\xd8\x75\x87\x1c\x07\x8d\xcb\x57\x0f\x27\xe0\x57\x94\xe6\x65\x78\x42\xd8\x21\x2a\xf2\x32\x8c\xab\xf3\x10\xa5\x75\xb9\x5b\x79\xd3\x2c\x89\x66\xee\x39\x0a\xe6\x52\x0a\xea\xf7\x65\xc7\xd3\x38\x8f\xa3\x2a\x2d\xea\x24\x3f\x0f\xa3\xd9\x6d\x30\x51\x70\xe6\x27\x97\x8b\xaf\x2e\x01\x97\xa1\xcf\x03\x3c\xbd\x74\x7f\x6f\xef\xde\xa8\x3a\x3f\xa9\x18\x7e\x5f\x3d\xab\x14\x8c\x9c\xcb\x9c\x38\xd2\xf7\x53\xff\x94\x92\x40\x09\xb5\x28\x8b\x88\x38\x4f\xe4\x7e\x6c\x97\x69\xe2\x28\x26\x6e\x52\xe2\xb4\x25\xb6\x2d\x71\x86\xb2\x80\x5d\x2d\x47\x96\xde\xdf\xe3\xb7\xb2\x95\xf2\xc1\xd8\x49\x24\x25\xa5\x73\x62\x5d\x13\xc7\x35\xb1\xaa\x89\x13\x9c\x73\xe2\xd4\xdf\xbb\x31\x6b\xe2\x1a\x63\x66\xc4\x65\x4d\x9c\x15\xc4\x05\xfc\x33\xc4\x55\xe2\x8f\x86\xb8\x48\x89\xab\x8a\xb8\x68\xe4\xac\x4a\x62\x65\x89\x93\x86\x58\x29\x62\x55\x10\xeb\x8c\x58\xa1\x94\xb5\x94\x79\x85\xb1\x22\x62\x5d\x8a\x4f\x45\x29\xf8\x18\xef\xa3\x96\x38\x49\x89\x23\xc4\x82\x73\x43\x9c\xb5\xc4\x55\x46\x9c\x23\xae\x98\xb8\x48\x88\x0b\xe4\x10\x39\x37\x72\x8f\xfc\x8d\xbe\xc1\x07\xd5\x78\x1f\xe1\x13\x7c\xb4\xf7\xbe\xc2\x0f\xe4\x07\xfe\x67\x11\x71\x1d\xdd\xfb\x8e\x67\xc8\x81\xca\xc4\x56\x53\x4a\x9f\xf1\x3e\x2a\x88\xdb\xcc\xe7\x48\xc9\xd1\x16\xe2\x5b\xf5\xc8\xdc\xc0\x91\x23\x37\x31\xb1\x2d\xc4\xdf\x26\xff\x2e\x94\xb9\x09\xfa\xf2\x20\x73\x66\x8f\xc2\x98\xa8\xd2\xd3\x20\xe6\xac\xbf\x04\xc2\x76\xa3\xff\x7f\x01\x6c\x0c\xf8\x0e\x5f\xf1\xf7\xf0\xab\xaa\xa2\x17\xe6\xd7\xde\x1d\xd2\x33\x38\x86\x39\x6e\x89\x9b\x98\x38\x52\xc4\x3a\x91\x5a\x8d\x23\xe2\xaa\x20\xb6\x25\x71\x6a\x84\x21\x15\xea\x14\x1c\xca\xa4\x66\x6b\x4d\xdc\x26\x32\xc7\xd1\x56\xa7\xc4\x49\x46\x5c\xe7\xc4\x65\x24\xec\x4a\x1b\xcf\x9d\x5c\xce\x49\x22\x5c\x41\x3b\x1b\x0b\xd3\xc0\x47\xd4\x6b\x9e\x11\xc7\xca\x73\xb3\x25\x6e\x20\x09\x50\x4f\x86\xd8\xa4\x72\x8d\x71\xe1\xa7\xe3\x13\xd8\x19\x4b\x5d\xa2\xbe\xcb\x52\x7c\xac\x4b\x62\x03\x1b\xe0\x66\x2a\xfe\x37\x89\xfc\x8e\x3a\xcf\x4b\x89\x3f\x41\x5c\x90\x1a\xe0\x86\x26\x4e\x91\x8b\x94\xb8\x29\x84\xc5\x8e\x05\x11\x71\x8a\x36\x46\xb8\x8c\x7c\x80\x07\x71\x2e\x71\x14\x86\x38\x2e\x89\x6d\x2e\xd2\x46\x7b\x0e\xc1\x56\xe2\x39\xd5\x34\xc4\x75\x21\x3c\xb3\xf0\xb5\x14\xc6\x82\x8b\xf8\x0d\x7e\xa5\x5e\x4a\x21\xae\xa4\x90\xdf\xf2\x46\x72\x8b\x5c\x80\xad\xc8\x29\x78\x09\xfb\x71\x25\xef\x0d\x4c\x04\xe7\xd0\x0e\x5c\xc7\x7b\x42\xec\x0a\xed\x52\x89\x01\xeb\x01\xd6\xa1\x14\x73\xa2\x94\xf1\xb1\x6e\x80\x9f\x60\xbe\x93\x74\x05\x71\x5a\x09\x6b\xf3\x56\xd6\x9e\x42\x0b\xeb\x70\x8f\xf8\xb0\xde\x3d\xe4\x9c\x36\xc4\x09\xd6\x9b\x42\xc6\x43\x5e\xf0\xde\x9f\xe6\xdc\xe1\x89\xfc\x2c\xde\x1d\x36\xff\x80\x7b\xc7\x7c\x7a\x78\x92\x7f\x87\x47\x3b\x91\x83\x47\x67\xe7\xe5\x79\x78\x5c\x22\x3c\x17\x93\xb2\x3c\x9d\x8b\x79\x52\x16\xc5\x4b\x73\xf1\xc9\xef\x40\xcf\x80\xa2\x16\x81\x90\xc6\x22\xd4\x46\x01\x13\x7b\x31\x03\x08\xe0\x80\xe8\x31\x46\xec\x55\x10\x07\xa9\x9c\x51\xf8\x4e\xa8\xb4\x52\xb4\x10\x35\x31\x84\x49\x2d\x36\x75\xeb\x45\x59\xe5\x8b\xd5\x43\x15\xf0\x03\xcc\x00\x5f\x14\x20\x9e\x03\x08\x00\x60\xd3\xfa\xc2\x2a\x45\xa4\x01\x88\x00\x04\x80\x03\x5f\xea\x56\x60\x07\x28\x03\xe2\x10\x1f\x89\xdf\x67\x01\x66\x10\x5b\x00\x67\x15\x13\xb7\x00\xbe\xf2\x42\xac\x16\xb0\x02\x7c\x88\xb1\xc8\x64\x0c\xe4\x02\xb1\x01\xea\x31\x60\x0b\x38\x34\x02\xdd\xda\x8b\x3d\xec\xe3\xda\x5c\xa0\xea\x20\x85\xfe\x2d\xb1\x89\x45\xd4\x3a\x08\xe5\x22\x60\x11\x2f\xf2\x03\x7f\x01\x7f\x40\x1f\x31\x3b\x01\x6b\x05\x68\x18\xaf\xce\xbc\x98\x34\xb2\x90\xe8\xc6\x43\xc6\x4a\x5e\xcb\x54\xa0\x0c\x20\x01\x9c\xc8\x29\xc4\x55\x8c\x45\x02\x80\x4f\x45\xac\x21\xde\x3a\x96\x78\x6d\x24\x00\x77\x30\x8d\x05\xa0\xb5\x87\xa1\xf6\x40\x06\xd4\x91\x03\xf8\x5b\xf8\x85\x21\xb7\x92\x47\xcc\x19\x08\x69\xf8\xef\x04\xad\x5f\x20\xe2\x58\xf6\xa9\x69\x41\xdc\x54\x32\x26\xe6\x8b\x13\xff\x4a\x60\x0f\x48\x5b\x3f\x27\xe0\x33\x62\xc5\xfb\xc1\xbc\x80\x9f\x58\xe4\xd2\x71\x6c\x2d\x79\x6e\x6b\x59\xe8\xdc\xc2\x5b\x7b\xb1\x89\xc5\xb0\x92\x39\xd1\xa6\x32\x2f\x9a\xda\xbf\x1b\x23\x39\xc1\xdc\x34\x5a\xf2\x90\xe5\xb2\xc8\x40\x7c\x62\x83\x62\x2b\x79\xff\x0f\x01\x9e\x26\xe2\x9f\x69\xa4\x0d\xfc\x3f\x00\xf0\xfd\x15\xf7\x3c\x7a\xef\xb7\xfd\x10\xdd\x87\xbe\x01\x3f\xcd\xed\xfd\xe3\x9c\x0a\xed\xa3\x32\xf2\x3f\x20\xf6\xe1\xf8\x3d\xae\xd3\x34\xff\xae\x6d\x78\x96\xbe\x30\xae\x9f\xfc\x0e\xff\x3c\x09\x0b\xaa\x68\x2f\x61\x21\x79\x32\x2f\x61\xb5\xaf\x78\xc8\x2c\xcc\x6c\x47\xf4\x52\x2a\x05\x84\x1e\xe5\x4e\xaa\x64\xcb\x89\x4a\x04\xb9\x50\xd5\x20\x10\x64\x31\xa4\x21\x28\x82\xed\x22\x2a\xb1\xd5\xd2\xdf\x91\x35\x16\x09\xda\xb6\x52\x9d\x18\x0b\x95\x1c\x69\xa9\x5c\x5c\x83\x0a\x20\xa2\xf5\x5b\x4d\x6c\xf5\x11\x17\xa4\x52\x12\xcb\xea\xe0\x56\x17\xe3\xb7\xbf\x89\xf8\x04\x02\xe0\x8c\xca\xd4\x4a\x68\x05\xf2\xa4\x3e\x76\xf8\x09\xf2\xd5\xb5\x48\x40\x67\xab\x16\x82\x83\x76\xa0\x2c\xb6\xa7\xd8\xe6\x83\xf4\xa0\x25\xda\xb8\x2d\x70\x2e\x72\x11\xab\x4d\x6b\xee\xe5\x9e\xf2\x52\x17\x71\x82\x06\xda\xaf\x3e\xd8\xea\xba\xdc\xf8\xb1\xb0\xca\x40\x4e\x22\x17\xa0\x3f\xe8\x8e\x31\x20\xe1\x11\x2b\xe4\x20\xb6\xd1\xa0\x1f\xa4\x2f\xb6\xd2\x78\x9f\xa0\x93\xf2\xab\xa6\xd5\x22\xfb\xd1\x1e\xd2\x18\x3e\x40\x4a\xba\xcf\x20\x4a\x68\x0d\x3f\x1a\x23\xf9\xc5\xb3\xc2\xe7\x02\x39\xb7\xde\x77\xac\x18\x58\x21\x20\x55\x91\xd3\x32\x91\xcf\x2d\x58\xfd\x10\x27\xae\xb5\xa7\xa3\x23\x60\x25\xef\x02\x32\x1b\xbf\xc3\x16\xf2\xe2\x08\xf9\xc8\x57\x49\xc4\x00\x5b\x58\x19\xf2\x5a\x56\xba\xfd\x5b\xf9\xfd\x93\xfc\x59\x80\xdc\x6f\xfa\x01\x1f\x0f\xfd\xd3\xeb\x49\x3c\xee\x1f\xe5\x44\x3a\x1e\x95\x8d\x97\x87\xe3\xe1\xe0\x47\x29\x9b\xa7\xdf\xc7\xc6\xf2\xa5\xd9\xf8\xf8\xff\x11\x9f\xfb\xc5\x7e\xfc\x44\xe9\x54\x6b\x26\x6a\x0c\x5b\x55\x93\x9c\xf6\x45\xdf\x7d\x92\xac\x85\x93\xa8\xd3\xcc\x7f\xd6\x02\x93\x2a\xf4\x41\x5d\x29\x51\x25\xcd\xb8\x95\xad\x84\x47\xaa\x10\x36\x68\xbf\xc5\x46\xdd\x41\xc1\x42\x51\x26\x4a\x3e\xf9\xa1\xee\xc7\x67\xd6\x6f\x4f\xa1\x4e\xca\x9d\x4f\x9c\xa8\x3d\x28\xd0\xc4\x8f\x53\xfb\x67\xa5\x3f\xd2\x56\x14\x25\x38\x86\xdf\xa3\x68\x57\xcd\x7c\xab\x7a\xc0\xda\x06\x6a\xb3\x94\x98\x0e\xd4\xf4\xde\x97\xf3\xbc\x9a\xde\x6b\xfa\x61\x4d\x1f\xf8\xd7\xf4\xd3\x35\xbd\xdb\xf1\xbf\x01\x00\x00\xff\xff\xc1\x34\xcf\x05\x00\x20\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1510853138, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20171115153101_create_job_table.down.sql": _20171115153101_create_job_tableDownSql,
	"20171115153101_create_job_table.up.sql": _20171115153101_create_job_tableUpSql,
	"20171115154634_create_jobresponse_table.up.sql": _20171115154634_create_jobresponse_tableUpSql,
	"20171115154931_create_schedule_table.up.sql": _20171115154931_create_schedule_tableUpSql,
	"20171115155747_create_crontab_table.up.sql": _20171115155747_create_crontab_tableUpSql,
	"20171115155941_create_lease_table.down.sql": _20171115155941_create_lease_tableDownSql,
	"20171115155941_create_lease_table.up.sql": _20171115155941_create_lease_tableUpSql,
	"20171115160316_create_relationships.up.sql": _20171115160316_create_relationshipsUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"20171115153101_create_job_table.down.sql": &bintree{_20171115153101_create_job_tableDownSql, map[string]*bintree{}},
	"20171115153101_create_job_table.up.sql": &bintree{_20171115153101_create_job_tableUpSql, map[string]*bintree{}},
	"20171115154634_create_jobresponse_table.up.sql": &bintree{_20171115154634_create_jobresponse_tableUpSql, map[string]*bintree{}},
	"20171115154931_create_schedule_table.up.sql": &bintree{_20171115154931_create_schedule_tableUpSql, map[string]*bintree{}},
	"20171115155747_create_crontab_table.up.sql": &bintree{_20171115155747_create_crontab_tableUpSql, map[string]*bintree{}},
	"20171115155941_create_lease_table.down.sql": &bintree{_20171115155941_create_lease_tableDownSql, map[string]*bintree{}},
	"20171115155941_create_lease_table.up.sql": &bintree{_20171115155941_create_lease_tableUpSql, map[string]*bintree{}},
	"20171115160316_create_relationships.up.sql": &bintree{_20171115160316_create_relationshipsUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

